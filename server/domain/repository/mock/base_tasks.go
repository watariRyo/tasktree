// Code generated by MockGen. DO NOT EDIT.
// Source: base_tasks.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/watariRyo/tasktree/server/domain/model"
	repository "github.com/watariRyo/tasktree/server/domain/repository"
)

// MockBaseTaskRepository is a mock of BaseTaskRepository interface.
type MockBaseTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBaseTaskRepositoryMockRecorder
}

// MockBaseTaskRepositoryMockRecorder is the mock recorder for MockBaseTaskRepository.
type MockBaseTaskRepositoryMockRecorder struct {
	mock *MockBaseTaskRepository
}

// NewMockBaseTaskRepository creates a new mock instance.
func NewMockBaseTaskRepository(ctrl *gomock.Controller) *MockBaseTaskRepository {
	mock := &MockBaseTaskRepository{ctrl: ctrl}
	mock.recorder = &MockBaseTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseTaskRepository) EXPECT() *MockBaseTaskRepositoryMockRecorder {
	return m.recorder
}

// GetBaseTaskByUserID mocks base method.
func (m *MockBaseTaskRepository) GetBaseTaskByUserID(ctx context.Context, conn repository.DBConnection, userID string) (*model.BaseTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseTaskByUserID", ctx, conn, userID)
	ret0, _ := ret[0].(*model.BaseTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseTaskByUserID indicates an expected call of GetBaseTaskByUserID.
func (mr *MockBaseTaskRepositoryMockRecorder) GetBaseTaskByUserID(ctx, conn, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseTaskByUserID", reflect.TypeOf((*MockBaseTaskRepository)(nil).GetBaseTaskByUserID), ctx, conn, userID)
}

// Insert mocks base method.
func (m *MockBaseTaskRepository) Insert(ctx context.Context, conn repository.DBConnection, input *model.BaseTask) (*model.BaseTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, conn, input)
	ret0, _ := ret[0].(*model.BaseTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockBaseTaskRepositoryMockRecorder) Insert(ctx, conn, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockBaseTaskRepository)(nil).Insert), ctx, conn, input)
}
