// Code generated by MockGen. DO NOT EDIT.
// Source: firebase.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	auth "firebase.google.com/go/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockFirebaseApp is a mock of FirebaseApp interface.
type MockFirebaseApp struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseAppMockRecorder
}

// MockFirebaseAppMockRecorder is the mock recorder for MockFirebaseApp.
type MockFirebaseAppMockRecorder struct {
	mock *MockFirebaseApp
}

// NewMockFirebaseApp creates a new mock instance.
func NewMockFirebaseApp(ctrl *gomock.Controller) *MockFirebaseApp {
	mock := &MockFirebaseApp{ctrl: ctrl}
	mock.recorder = &MockFirebaseAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebaseApp) EXPECT() *MockFirebaseAppMockRecorder {
	return m.recorder
}

// VerifyIDToken mocks base method.
func (m *MockFirebaseApp) VerifyIDToken(ctx context.Context, idToken string) (*auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", ctx, idToken)
	ret0, _ := ret[0].(*auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockFirebaseAppMockRecorder) VerifyIDToken(ctx, idToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockFirebaseApp)(nil).VerifyIDToken), ctx, idToken)
}
