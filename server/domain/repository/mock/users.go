// Code generated by MockGen. DO NOT EDIT.
// Source: users.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/watariRyo/tasktree/server/domain/model"
	repository "github.com/watariRyo/tasktree/server/domain/repository"
)

// MockUsersRepository is a mock of UsersRepository interface.
type MockUsersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepositoryMockRecorder
}

// MockUsersRepositoryMockRecorder is the mock recorder for MockUsersRepository.
type MockUsersRepositoryMockRecorder struct {
	mock *MockUsersRepository
}

// NewMockUsersRepository creates a new mock instance.
func NewMockUsersRepository(ctrl *gomock.Controller) *MockUsersRepository {
	mock := &MockUsersRepository{ctrl: ctrl}
	mock.recorder = &MockUsersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepository) EXPECT() *MockUsersRepositoryMockRecorder {
	return m.recorder
}

// Exist mocks base method.
func (m *MockUsersRepository) Exist(ctx context.Context, conn repository.DBConnection, uuid string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", ctx, conn, uuid)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockUsersRepositoryMockRecorder) Exist(ctx, conn, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockUsersRepository)(nil).Exist), ctx, conn, uuid)
}

// GetUserByUUID mocks base method.
func (m *MockUsersRepository) GetUserByUUID(ctx context.Context, conn repository.DBConnection, uuid string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUUID", ctx, conn, uuid)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUUID indicates an expected call of GetUserByUUID.
func (mr *MockUsersRepositoryMockRecorder) GetUserByUUID(ctx, conn, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUUID", reflect.TypeOf((*MockUsersRepository)(nil).GetUserByUUID), ctx, conn, uuid)
}

// Insert mocks base method.
func (m *MockUsersRepository) Insert(ctx context.Context, conn repository.DBConnection, input *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, conn, input)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockUsersRepositoryMockRecorder) Insert(ctx, conn, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUsersRepository)(nil).Insert), ctx, conn, input)
}
