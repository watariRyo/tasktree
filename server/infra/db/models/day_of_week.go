// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DayOfWeek is an object representing the database table.
type DayOfWeek struct { // ID
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 曜日
	DayOfWeek int `boil:"day_of_week" json:"day_of_week" toml:"day_of_week" yaml:"day_of_week"`
	// 作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// 更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *dayOfWeekR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dayOfWeekL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DayOfWeekColumns = struct {
	ID        string
	DayOfWeek string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	DayOfWeek: "day_of_week",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var DayOfWeekTableColumns = struct {
	ID        string
	DayOfWeek string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "day_of_week.id",
	DayOfWeek: "day_of_week.day_of_week",
	CreatedAt: "day_of_week.created_at",
	UpdatedAt: "day_of_week.updated_at",
}

// Generated where

var DayOfWeekWhere = struct {
	ID        whereHelperint
	DayOfWeek whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "`day_of_week`.`id`"},
	DayOfWeek: whereHelperint{field: "`day_of_week`.`day_of_week`"},
	CreatedAt: whereHelpertime_Time{field: "`day_of_week`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`day_of_week`.`updated_at`"},
}

// DayOfWeekRels is where relationship names are stored.
var DayOfWeekRels = struct {
	BaseTasks string
}{
	BaseTasks: "BaseTasks",
}

// dayOfWeekR is where relationships are stored.
type dayOfWeekR struct {
	BaseTasks BaseTaskSlice `boil:"BaseTasks" json:"BaseTasks" toml:"BaseTasks" yaml:"BaseTasks"`
}

// NewStruct creates a new relationship struct
func (*dayOfWeekR) NewStruct() *dayOfWeekR {
	return &dayOfWeekR{}
}

func (r *dayOfWeekR) GetBaseTasks() BaseTaskSlice {
	if r == nil {
		return nil
	}
	return r.BaseTasks
}

// dayOfWeekL is where Load methods for each relationship are stored.
type dayOfWeekL struct{}

var (
	dayOfWeekAllColumns            = []string{"id", "day_of_week", "created_at", "updated_at"}
	dayOfWeekColumnsWithoutDefault = []string{"day_of_week", "created_at", "updated_at"}
	dayOfWeekColumnsWithDefault    = []string{"id"}
	dayOfWeekPrimaryKeyColumns     = []string{"id"}
	dayOfWeekGeneratedColumns      = []string{}
)

type (
	// DayOfWeekSlice is an alias for a slice of pointers to DayOfWeek.
	// This should almost always be used instead of []DayOfWeek.
	DayOfWeekSlice []*DayOfWeek
	// DayOfWeekHook is the signature for custom DayOfWeek hook methods
	DayOfWeekHook func(context.Context, boil.ContextExecutor, *DayOfWeek) error

	dayOfWeekQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dayOfWeekType                 = reflect.TypeOf(&DayOfWeek{})
	dayOfWeekMapping              = queries.MakeStructMapping(dayOfWeekType)
	dayOfWeekPrimaryKeyMapping, _ = queries.BindMapping(dayOfWeekType, dayOfWeekMapping, dayOfWeekPrimaryKeyColumns)
	dayOfWeekInsertCacheMut       sync.RWMutex
	dayOfWeekInsertCache          = make(map[string]insertCache)
	dayOfWeekUpdateCacheMut       sync.RWMutex
	dayOfWeekUpdateCache          = make(map[string]updateCache)
	dayOfWeekUpsertCacheMut       sync.RWMutex
	dayOfWeekUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dayOfWeekAfterSelectHooks []DayOfWeekHook

var dayOfWeekBeforeInsertHooks []DayOfWeekHook
var dayOfWeekAfterInsertHooks []DayOfWeekHook

var dayOfWeekBeforeUpdateHooks []DayOfWeekHook
var dayOfWeekAfterUpdateHooks []DayOfWeekHook

var dayOfWeekBeforeDeleteHooks []DayOfWeekHook
var dayOfWeekAfterDeleteHooks []DayOfWeekHook

var dayOfWeekBeforeUpsertHooks []DayOfWeekHook
var dayOfWeekAfterUpsertHooks []DayOfWeekHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DayOfWeek) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dayOfWeekAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DayOfWeek) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dayOfWeekBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DayOfWeek) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dayOfWeekAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DayOfWeek) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dayOfWeekBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DayOfWeek) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dayOfWeekAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DayOfWeek) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dayOfWeekBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DayOfWeek) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dayOfWeekAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DayOfWeek) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dayOfWeekBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DayOfWeek) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dayOfWeekAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDayOfWeekHook registers your hook function for all future operations.
func AddDayOfWeekHook(hookPoint boil.HookPoint, dayOfWeekHook DayOfWeekHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dayOfWeekAfterSelectHooks = append(dayOfWeekAfterSelectHooks, dayOfWeekHook)
	case boil.BeforeInsertHook:
		dayOfWeekBeforeInsertHooks = append(dayOfWeekBeforeInsertHooks, dayOfWeekHook)
	case boil.AfterInsertHook:
		dayOfWeekAfterInsertHooks = append(dayOfWeekAfterInsertHooks, dayOfWeekHook)
	case boil.BeforeUpdateHook:
		dayOfWeekBeforeUpdateHooks = append(dayOfWeekBeforeUpdateHooks, dayOfWeekHook)
	case boil.AfterUpdateHook:
		dayOfWeekAfterUpdateHooks = append(dayOfWeekAfterUpdateHooks, dayOfWeekHook)
	case boil.BeforeDeleteHook:
		dayOfWeekBeforeDeleteHooks = append(dayOfWeekBeforeDeleteHooks, dayOfWeekHook)
	case boil.AfterDeleteHook:
		dayOfWeekAfterDeleteHooks = append(dayOfWeekAfterDeleteHooks, dayOfWeekHook)
	case boil.BeforeUpsertHook:
		dayOfWeekBeforeUpsertHooks = append(dayOfWeekBeforeUpsertHooks, dayOfWeekHook)
	case boil.AfterUpsertHook:
		dayOfWeekAfterUpsertHooks = append(dayOfWeekAfterUpsertHooks, dayOfWeekHook)
	}
}

// One returns a single dayOfWeek record from the query.
func (q dayOfWeekQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DayOfWeek, error) {
	o := &DayOfWeek{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for day_of_week")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DayOfWeek records from the query.
func (q dayOfWeekQuery) All(ctx context.Context, exec boil.ContextExecutor) (DayOfWeekSlice, error) {
	var o []*DayOfWeek

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DayOfWeek slice")
	}

	if len(dayOfWeekAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DayOfWeek records in the query.
func (q dayOfWeekQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count day_of_week rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dayOfWeekQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if day_of_week exists")
	}

	return count > 0, nil
}

// BaseTasks retrieves all the base_task's BaseTasks with an executor.
func (o *DayOfWeek) BaseTasks(mods ...qm.QueryMod) baseTaskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`base_task`.`day_of_week_id`=?", o.ID),
	)

	return BaseTasks(queryMods...)
}

// LoadBaseTasks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dayOfWeekL) LoadBaseTasks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDayOfWeek interface{}, mods queries.Applicator) error {
	var slice []*DayOfWeek
	var object *DayOfWeek

	if singular {
		var ok bool
		object, ok = maybeDayOfWeek.(*DayOfWeek)
		if !ok {
			object = new(DayOfWeek)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDayOfWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDayOfWeek))
			}
		}
	} else {
		s, ok := maybeDayOfWeek.(*[]*DayOfWeek)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDayOfWeek)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDayOfWeek))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dayOfWeekR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dayOfWeekR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`base_task`),
		qm.WhereIn(`base_task.day_of_week_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load base_task")
	}

	var resultSlice []*BaseTask
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice base_task")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on base_task")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base_task")
	}

	if len(baseTaskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BaseTasks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &baseTaskR{}
			}
			foreign.R.DayOfWeek = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DayOfWeekID {
				local.R.BaseTasks = append(local.R.BaseTasks, foreign)
				if foreign.R == nil {
					foreign.R = &baseTaskR{}
				}
				foreign.R.DayOfWeek = local
				break
			}
		}
	}

	return nil
}

// AddBaseTasks adds the given related objects to the existing relationships
// of the day_of_week, optionally inserting them as new records.
// Appends related to o.R.BaseTasks.
// Sets related.R.DayOfWeek appropriately.
func (o *DayOfWeek) AddBaseTasks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BaseTask) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DayOfWeekID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `base_task` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"day_of_week_id"}),
				strmangle.WhereClause("`", "`", 0, baseTaskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DayOfWeekID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dayOfWeekR{
			BaseTasks: related,
		}
	} else {
		o.R.BaseTasks = append(o.R.BaseTasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &baseTaskR{
				DayOfWeek: o,
			}
		} else {
			rel.R.DayOfWeek = o
		}
	}
	return nil
}

// DayOfWeeks retrieves all the records using an executor.
func DayOfWeeks(mods ...qm.QueryMod) dayOfWeekQuery {
	mods = append(mods, qm.From("`day_of_week`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`day_of_week`.*"})
	}

	return dayOfWeekQuery{q}
}

// FindDayOfWeek retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDayOfWeek(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DayOfWeek, error) {
	dayOfWeekObj := &DayOfWeek{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `day_of_week` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dayOfWeekObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from day_of_week")
	}

	if err = dayOfWeekObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dayOfWeekObj, err
	}

	return dayOfWeekObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DayOfWeek) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no day_of_week provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dayOfWeekColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dayOfWeekInsertCacheMut.RLock()
	cache, cached := dayOfWeekInsertCache[key]
	dayOfWeekInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dayOfWeekAllColumns,
			dayOfWeekColumnsWithDefault,
			dayOfWeekColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dayOfWeekType, dayOfWeekMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dayOfWeekType, dayOfWeekMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `day_of_week` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `day_of_week` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `day_of_week` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dayOfWeekPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into day_of_week")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dayOfWeekMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for day_of_week")
	}

CacheNoHooks:
	if !cached {
		dayOfWeekInsertCacheMut.Lock()
		dayOfWeekInsertCache[key] = cache
		dayOfWeekInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DayOfWeek.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DayOfWeek) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dayOfWeekUpdateCacheMut.RLock()
	cache, cached := dayOfWeekUpdateCache[key]
	dayOfWeekUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dayOfWeekAllColumns,
			dayOfWeekPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update day_of_week, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `day_of_week` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dayOfWeekPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dayOfWeekType, dayOfWeekMapping, append(wl, dayOfWeekPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update day_of_week row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for day_of_week")
	}

	if !cached {
		dayOfWeekUpdateCacheMut.Lock()
		dayOfWeekUpdateCache[key] = cache
		dayOfWeekUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dayOfWeekQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for day_of_week")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for day_of_week")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DayOfWeekSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dayOfWeekPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `day_of_week` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dayOfWeekPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dayOfWeek slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dayOfWeek")
	}
	return rowsAff, nil
}

var mySQLDayOfWeekUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DayOfWeek) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no day_of_week provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dayOfWeekColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDayOfWeekUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dayOfWeekUpsertCacheMut.RLock()
	cache, cached := dayOfWeekUpsertCache[key]
	dayOfWeekUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dayOfWeekAllColumns,
			dayOfWeekColumnsWithDefault,
			dayOfWeekColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dayOfWeekAllColumns,
			dayOfWeekPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert day_of_week, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`day_of_week`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `day_of_week` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dayOfWeekType, dayOfWeekMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dayOfWeekType, dayOfWeekMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for day_of_week")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dayOfWeekMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dayOfWeekType, dayOfWeekMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for day_of_week")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for day_of_week")
	}

CacheNoHooks:
	if !cached {
		dayOfWeekUpsertCacheMut.Lock()
		dayOfWeekUpsertCache[key] = cache
		dayOfWeekUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DayOfWeek record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DayOfWeek) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DayOfWeek provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dayOfWeekPrimaryKeyMapping)
	sql := "DELETE FROM `day_of_week` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from day_of_week")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for day_of_week")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dayOfWeekQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dayOfWeekQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from day_of_week")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for day_of_week")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DayOfWeekSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dayOfWeekBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dayOfWeekPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `day_of_week` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dayOfWeekPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dayOfWeek slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for day_of_week")
	}

	if len(dayOfWeekAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DayOfWeek) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDayOfWeek(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DayOfWeekSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DayOfWeekSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dayOfWeekPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `day_of_week`.* FROM `day_of_week` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dayOfWeekPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DayOfWeekSlice")
	}

	*o = slice

	return nil
}

// DayOfWeekExists checks if the DayOfWeek row exists.
func DayOfWeekExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `day_of_week` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if day_of_week exists")
	}

	return exists, nil
}

// Exists checks if the DayOfWeek row exists.
func (o *DayOfWeek) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DayOfWeekExists(ctx, exec, o.ID)
}
