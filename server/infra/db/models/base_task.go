// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BaseTask is an object representing the database table.
type BaseTask struct { // ID
	ID int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ユーザーID
	UserID int `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// タイトル
	Title null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	// 内容
	Content null.String `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	// 曜日
	DayOfWeekID int `boil:"day_of_week_id" json:"day_of_week_id" toml:"day_of_week_id" yaml:"day_of_week_id"`
	// 作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// 更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *baseTaskR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L baseTaskL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BaseTaskColumns = struct {
	ID          string
	UserID      string
	Title       string
	Content     string
	DayOfWeekID string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	UserID:      "user_id",
	Title:       "title",
	Content:     "content",
	DayOfWeekID: "day_of_week_id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var BaseTaskTableColumns = struct {
	ID          string
	UserID      string
	Title       string
	Content     string
	DayOfWeekID string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "base_task.id",
	UserID:      "base_task.user_id",
	Title:       "base_task.title",
	Content:     "base_task.content",
	DayOfWeekID: "base_task.day_of_week_id",
	CreatedAt:   "base_task.created_at",
	UpdatedAt:   "base_task.updated_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BaseTaskWhere = struct {
	ID          whereHelperint64
	UserID      whereHelperint
	Title       whereHelpernull_String
	Content     whereHelpernull_String
	DayOfWeekID whereHelperint
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "`base_task`.`id`"},
	UserID:      whereHelperint{field: "`base_task`.`user_id`"},
	Title:       whereHelpernull_String{field: "`base_task`.`title`"},
	Content:     whereHelpernull_String{field: "`base_task`.`content`"},
	DayOfWeekID: whereHelperint{field: "`base_task`.`day_of_week_id`"},
	CreatedAt:   whereHelpertime_Time{field: "`base_task`.`created_at`"},
	UpdatedAt:   whereHelpertime_Time{field: "`base_task`.`updated_at`"},
}

// BaseTaskRels is where relationship names are stored.
var BaseTaskRels = struct {
	DayOfWeek string
	User      string
}{
	DayOfWeek: "DayOfWeek",
	User:      "User",
}

// baseTaskR is where relationships are stored.
type baseTaskR struct {
	DayOfWeek *DayOfWeek `boil:"DayOfWeek" json:"DayOfWeek" toml:"DayOfWeek" yaml:"DayOfWeek"`
	User      *User      `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*baseTaskR) NewStruct() *baseTaskR {
	return &baseTaskR{}
}

func (r *baseTaskR) GetDayOfWeek() *DayOfWeek {
	if r == nil {
		return nil
	}
	return r.DayOfWeek
}

func (r *baseTaskR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// baseTaskL is where Load methods for each relationship are stored.
type baseTaskL struct{}

var (
	baseTaskAllColumns            = []string{"id", "user_id", "title", "content", "day_of_week_id", "created_at", "updated_at"}
	baseTaskColumnsWithoutDefault = []string{"user_id", "title", "content", "day_of_week_id", "created_at", "updated_at"}
	baseTaskColumnsWithDefault    = []string{"id"}
	baseTaskPrimaryKeyColumns     = []string{"id"}
	baseTaskGeneratedColumns      = []string{}
)

type (
	// BaseTaskSlice is an alias for a slice of pointers to BaseTask.
	// This should almost always be used instead of []BaseTask.
	BaseTaskSlice []*BaseTask
	// BaseTaskHook is the signature for custom BaseTask hook methods
	BaseTaskHook func(context.Context, boil.ContextExecutor, *BaseTask) error

	baseTaskQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	baseTaskType                 = reflect.TypeOf(&BaseTask{})
	baseTaskMapping              = queries.MakeStructMapping(baseTaskType)
	baseTaskPrimaryKeyMapping, _ = queries.BindMapping(baseTaskType, baseTaskMapping, baseTaskPrimaryKeyColumns)
	baseTaskInsertCacheMut       sync.RWMutex
	baseTaskInsertCache          = make(map[string]insertCache)
	baseTaskUpdateCacheMut       sync.RWMutex
	baseTaskUpdateCache          = make(map[string]updateCache)
	baseTaskUpsertCacheMut       sync.RWMutex
	baseTaskUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var baseTaskAfterSelectHooks []BaseTaskHook

var baseTaskBeforeInsertHooks []BaseTaskHook
var baseTaskAfterInsertHooks []BaseTaskHook

var baseTaskBeforeUpdateHooks []BaseTaskHook
var baseTaskAfterUpdateHooks []BaseTaskHook

var baseTaskBeforeDeleteHooks []BaseTaskHook
var baseTaskAfterDeleteHooks []BaseTaskHook

var baseTaskBeforeUpsertHooks []BaseTaskHook
var baseTaskAfterUpsertHooks []BaseTaskHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BaseTask) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseTaskAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BaseTask) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseTaskBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BaseTask) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseTaskAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BaseTask) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseTaskBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BaseTask) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseTaskAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BaseTask) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseTaskBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BaseTask) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseTaskAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BaseTask) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseTaskBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BaseTask) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseTaskAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBaseTaskHook registers your hook function for all future operations.
func AddBaseTaskHook(hookPoint boil.HookPoint, baseTaskHook BaseTaskHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		baseTaskAfterSelectHooks = append(baseTaskAfterSelectHooks, baseTaskHook)
	case boil.BeforeInsertHook:
		baseTaskBeforeInsertHooks = append(baseTaskBeforeInsertHooks, baseTaskHook)
	case boil.AfterInsertHook:
		baseTaskAfterInsertHooks = append(baseTaskAfterInsertHooks, baseTaskHook)
	case boil.BeforeUpdateHook:
		baseTaskBeforeUpdateHooks = append(baseTaskBeforeUpdateHooks, baseTaskHook)
	case boil.AfterUpdateHook:
		baseTaskAfterUpdateHooks = append(baseTaskAfterUpdateHooks, baseTaskHook)
	case boil.BeforeDeleteHook:
		baseTaskBeforeDeleteHooks = append(baseTaskBeforeDeleteHooks, baseTaskHook)
	case boil.AfterDeleteHook:
		baseTaskAfterDeleteHooks = append(baseTaskAfterDeleteHooks, baseTaskHook)
	case boil.BeforeUpsertHook:
		baseTaskBeforeUpsertHooks = append(baseTaskBeforeUpsertHooks, baseTaskHook)
	case boil.AfterUpsertHook:
		baseTaskAfterUpsertHooks = append(baseTaskAfterUpsertHooks, baseTaskHook)
	}
}

// One returns a single baseTask record from the query.
func (q baseTaskQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BaseTask, error) {
	o := &BaseTask{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for base_task")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BaseTask records from the query.
func (q baseTaskQuery) All(ctx context.Context, exec boil.ContextExecutor) (BaseTaskSlice, error) {
	var o []*BaseTask

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BaseTask slice")
	}

	if len(baseTaskAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BaseTask records in the query.
func (q baseTaskQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count base_task rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q baseTaskQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if base_task exists")
	}

	return count > 0, nil
}

// DayOfWeek pointed to by the foreign key.
func (o *BaseTask) DayOfWeek(mods ...qm.QueryMod) dayOfWeekQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.DayOfWeekID),
	}

	queryMods = append(queryMods, mods...)

	return DayOfWeeks(queryMods...)
}

// User pointed to by the foreign key.
func (o *BaseTask) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadDayOfWeek allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (baseTaskL) LoadDayOfWeek(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBaseTask interface{}, mods queries.Applicator) error {
	var slice []*BaseTask
	var object *BaseTask

	if singular {
		var ok bool
		object, ok = maybeBaseTask.(*BaseTask)
		if !ok {
			object = new(BaseTask)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBaseTask)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBaseTask))
			}
		}
	} else {
		s, ok := maybeBaseTask.(*[]*BaseTask)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBaseTask)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBaseTask))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseTaskR{}
		}
		args = append(args, object.DayOfWeekID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseTaskR{}
			}

			for _, a := range args {
				if a == obj.DayOfWeekID {
					continue Outer
				}
			}

			args = append(args, obj.DayOfWeekID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`day_of_week`),
		qm.WhereIn(`day_of_week.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DayOfWeek")
	}

	var resultSlice []*DayOfWeek
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DayOfWeek")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for day_of_week")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for day_of_week")
	}

	if len(dayOfWeekAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DayOfWeek = foreign
		if foreign.R == nil {
			foreign.R = &dayOfWeekR{}
		}
		foreign.R.BaseTasks = append(foreign.R.BaseTasks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DayOfWeekID == foreign.ID {
				local.R.DayOfWeek = foreign
				if foreign.R == nil {
					foreign.R = &dayOfWeekR{}
				}
				foreign.R.BaseTasks = append(foreign.R.BaseTasks, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (baseTaskL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBaseTask interface{}, mods queries.Applicator) error {
	var slice []*BaseTask
	var object *BaseTask

	if singular {
		var ok bool
		object, ok = maybeBaseTask.(*BaseTask)
		if !ok {
			object = new(BaseTask)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBaseTask)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBaseTask))
			}
		}
	} else {
		s, ok := maybeBaseTask.(*[]*BaseTask)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBaseTask)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBaseTask))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseTaskR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseTaskR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.BaseTasks = append(foreign.R.BaseTasks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.BaseTasks = append(foreign.R.BaseTasks, local)
				break
			}
		}
	}

	return nil
}

// SetDayOfWeek of the baseTask to the related item.
// Sets o.R.DayOfWeek to related.
// Adds o to related.R.BaseTasks.
func (o *BaseTask) SetDayOfWeek(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DayOfWeek) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `base_task` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"day_of_week_id"}),
		strmangle.WhereClause("`", "`", 0, baseTaskPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DayOfWeekID = related.ID
	if o.R == nil {
		o.R = &baseTaskR{
			DayOfWeek: related,
		}
	} else {
		o.R.DayOfWeek = related
	}

	if related.R == nil {
		related.R = &dayOfWeekR{
			BaseTasks: BaseTaskSlice{o},
		}
	} else {
		related.R.BaseTasks = append(related.R.BaseTasks, o)
	}

	return nil
}

// SetUser of the baseTask to the related item.
// Sets o.R.User to related.
// Adds o to related.R.BaseTasks.
func (o *BaseTask) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `base_task` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, baseTaskPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &baseTaskR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			BaseTasks: BaseTaskSlice{o},
		}
	} else {
		related.R.BaseTasks = append(related.R.BaseTasks, o)
	}

	return nil
}

// BaseTasks retrieves all the records using an executor.
func BaseTasks(mods ...qm.QueryMod) baseTaskQuery {
	mods = append(mods, qm.From("`base_task`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`base_task`.*"})
	}

	return baseTaskQuery{q}
}

// FindBaseTask retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBaseTask(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*BaseTask, error) {
	baseTaskObj := &BaseTask{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `base_task` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, baseTaskObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from base_task")
	}

	if err = baseTaskObj.doAfterSelectHooks(ctx, exec); err != nil {
		return baseTaskObj, err
	}

	return baseTaskObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BaseTask) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no base_task provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(baseTaskColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	baseTaskInsertCacheMut.RLock()
	cache, cached := baseTaskInsertCache[key]
	baseTaskInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			baseTaskAllColumns,
			baseTaskColumnsWithDefault,
			baseTaskColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(baseTaskType, baseTaskMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(baseTaskType, baseTaskMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `base_task` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `base_task` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `base_task` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, baseTaskPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into base_task")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == baseTaskMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for base_task")
	}

CacheNoHooks:
	if !cached {
		baseTaskInsertCacheMut.Lock()
		baseTaskInsertCache[key] = cache
		baseTaskInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BaseTask.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BaseTask) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	baseTaskUpdateCacheMut.RLock()
	cache, cached := baseTaskUpdateCache[key]
	baseTaskUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			baseTaskAllColumns,
			baseTaskPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update base_task, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `base_task` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, baseTaskPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(baseTaskType, baseTaskMapping, append(wl, baseTaskPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update base_task row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for base_task")
	}

	if !cached {
		baseTaskUpdateCacheMut.Lock()
		baseTaskUpdateCache[key] = cache
		baseTaskUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q baseTaskQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for base_task")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for base_task")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BaseTaskSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), baseTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `base_task` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, baseTaskPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in baseTask slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all baseTask")
	}
	return rowsAff, nil
}

var mySQLBaseTaskUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BaseTask) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no base_task provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(baseTaskColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBaseTaskUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	baseTaskUpsertCacheMut.RLock()
	cache, cached := baseTaskUpsertCache[key]
	baseTaskUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			baseTaskAllColumns,
			baseTaskColumnsWithDefault,
			baseTaskColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			baseTaskAllColumns,
			baseTaskPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert base_task, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`base_task`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `base_task` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(baseTaskType, baseTaskMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(baseTaskType, baseTaskMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for base_task")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == baseTaskMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(baseTaskType, baseTaskMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for base_task")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for base_task")
	}

CacheNoHooks:
	if !cached {
		baseTaskUpsertCacheMut.Lock()
		baseTaskUpsertCache[key] = cache
		baseTaskUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BaseTask record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BaseTask) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BaseTask provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), baseTaskPrimaryKeyMapping)
	sql := "DELETE FROM `base_task` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from base_task")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for base_task")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q baseTaskQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no baseTaskQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from base_task")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for base_task")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BaseTaskSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(baseTaskBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), baseTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `base_task` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, baseTaskPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from baseTask slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for base_task")
	}

	if len(baseTaskAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BaseTask) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBaseTask(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BaseTaskSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BaseTaskSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), baseTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `base_task`.* FROM `base_task` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, baseTaskPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BaseTaskSlice")
	}

	*o = slice

	return nil
}

// BaseTaskExists checks if the BaseTask row exists.
func BaseTaskExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `base_task` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if base_task exists")
	}

	return exists, nil
}

// Exists checks if the BaseTask row exists.
func (o *BaseTask) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BaseTaskExists(ctx, exec, o.ID)
}
